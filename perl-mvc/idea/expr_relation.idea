# Abandon sql syntax order
# Supports whatever syntax
select('s.date date, s.time as time', 'si.price')
where('s.date >=', '2014-05-06')
and('(s.time >=', 12)
or(')s.time', undef)
from('sales s')
join('sales_items si', 'left')
where(qw(s.sale_id si.sale_id))
and(qw(s.customer_id si.customer_id));

# This builds a structure like
select {
	{
		[s.date, s.time, si.price],
		[date, time, '']
	}
}
from => {
	[sales, sales_items],
	[s, si]
},
join => {
	[left],
	[
		{
			[=, =],
			{
				[s.sale_id, s.customer_id],
				[si.sale_id, si.customer_id]
			}
		}, {..
	]
}
where {
	{
		[>=],
		{
			[s.date],
			[2014-05-06]
		}
	}
}

and(s.data like '%data%' or s.data like '%data2%' or(s.data like '%data3%' or s.data like '%data4%'))

#expr relation
{
	[and, expr],
	{
		[simple],
		[set]
	}
}

from('table'|{table => 'a'}[, 'left'])

select('data', 'figure as shape')
where('data like' '%data%')
from('table s')
from({table_b => 'f'}, 'left')
where('s.data', 'f.data')
where({s.data, 'f.data2'})
limit(1, 4)
get()

from('cats')
where('cat_id >=', 5, 'cat_id <=', 50) //implicit and
and('cat_type', 'kitten') //explicit
and('(cat_name like', '%R')
or(')cat_name like' '%E')

where => {
	[where, and, and, and],
	{
		[>=, <=, =, dict],
		{
			[cat_id, cat_id, cat_type],
			[5, 50, 'kitten']
		}
	}
}

