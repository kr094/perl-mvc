dictionary = {
	field => value
	field2 => value
}

unless exists then dictionary = {
	field => [value, value2]
	field2 => value
}

where x = value and(y = value or y = value2)

from(table t)
from(table2 x, left)
where(col => value)
or(col2 => value2)

# Avoid relying on positional data

from = [{
	table => table
	alias => t
	join => ''
	on => undef
}
,{
	table => table2
	alias => x
	join => {
		join => 'left',
		on => {
			field => value
			field2 => [value1, value2]
		}
	}
}...]

select('data', 'shape')
where('data like' '%shape%')
from('table s')
from({table_2 => 'f'}, 'left')
where('s.data', 'f.data')
where({s.data >=, 'f.data2'})
from('table_3 q', right)
where('s.data !=', 'q.data')
get(1, 4)

from => {
	join => {
		operator => [from, left, right],
		equality => {
			table => s,
			table_2 => f
			table_3 => q
		}
	},
	on => {
		[{
			operator => [=, >=],
			equality => {
				[s.data, f.data],
				[f.data, f.data2]
			}
		},
		]
	}
}

where => {
	operator => [where, and],
	equality => {
		[s.data, f.data],
		[f.data, f.data2]
	}
}

