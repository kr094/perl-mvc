dictionary = {
	field => value
	field2 => value
}

unless exists then dictionary = {
	field => [value, value2]
	field2 => value
}

where x = value and(y = value or y = value2)

from(table t)
from(table2 x, left)
where(col => value)
or(col2 => value2)

# Avoid relying on positional data

from = [{
	table => table
	alias => t
	join => ''
	on => undef
}
,{
	table => table2
	alias => x
	join => {
		join => 'left',
		on => {
			field => value
			field2 => [value1, value2]
		}
	}
}...]

select('data', 'shape')
where('data like' '%shape%')
wherre('data', 'shape')
from('table s')
from({table_2 => 'f'}, 'left')
where('s.data', 'f.data')
where({s.data >=, 'f.data2'})
from('table_3 q', right)
where('s.data !=', 'q.data')
get(1, 4)

from => {
	
}

where => {
	_map => {
		0 => {where => 0}
		1 => {and => 0}
		2 => {and => 1}
		3 => {or => 0}
	}
	where => {
		data => 'like %shape%'
	}
	and => {
		data => ['= shape', 'like 2']
	}
	or => {
		data => 'shape'
	}
}

